# ----------------------------------------
# Runner for bender's decomposition of
# the ATM Money Problem
# ----------------------------------------

reset;

model atm.benders.mod
data atm.dat;

option solver cplex;
option omit_zero_rows 1;
option solver_msg 0;
option cplex_options 'outlev=0 presolve=0';
option show_boundtol 0;

# Problem declaration
problem Master: x, z, Total_Cost, Cuts;
problem Sub: u, Dual_Cost, MissingCost;

suffix unbdd OUT;

# Initializations
let NCuts := 0;
let z := 0;
let X := U;

param GAP default Infinity;
param epsilon default 1.0e-5;

repeat {
    printf "-------------------------------------------------------\n";
    printf "Iteration %d\n", NCuts + 1;
    printf "-------------------------------------------------------\n";

    printf "Solving Subproblem\n";
    solve Sub > ./tmp.rubbish;
    display Sub.result, Dual_Cost;

    let NCuts := NCuts + 1;
    if Sub.result = "unbounded" then {
        printf "Subproblem Unbounded -> Adding Ray Cut\n";

        display u.unbdd;
        let CutType[NCuts] := "ray";
        let {i in S} Y[i, NCuts] := u[i].unbdd;
    }
    else {
        let GAP := Dual_Cost - z;
        
        display GAP;

        if GAP <= epsilon then break;
        
        printf "Subproblem Solved -> Adding Point Cut\n";


        let CutType[NCuts] := "point";
        let {i in S} Y[i, NCuts] := u[i];
    }

    printf "\nSolving Master Problem\n";
    solve Master > ./tmp.rubbish;

    display Master.result, x, z, Total_Cost;

    let X := x;
}

display x, Total_Cost;