# ----------------------------------------
# Runner for bender's decomposition of
# the ATM Money Problem
# ----------------------------------------

reset;

model benders_simplified.mod
data atm.dat;

option solver cplex;
# option omit_zero_rows 1;
# option solver_msg 0;
# option cplex_options 'outlev=0 presolve=0';
# option show_boundtol 0;

# Problem declaration
problem Master: x, z, Total_Cost, Cuts;
problem Sub: u, Dual_Cost, MissingCost;

suffix unbdd OUT;

# Initializations
let NCuts := 0;
let X := U;
let z := C*X;

param GAP default Infinity;
param epsilon default 1.0e-8;

param DUAL_COSTS {1..NCuts};
param TOTAL_COSTS {1..NCuts};
param Zs {1..NCuts};
param Xs {1..NCuts};
param GAPs{1..NCuts};

repeat {
    printf "-------------------------------------------------------\n";
    printf "Iteration %d\n", NCuts + 1;
    printf "-------------------------------------------------------\n";

    printf "Solving Subproblem\n";
    solve Sub > ./tmp.rubbish;
    display Sub.result, Dual_Cost;
    

    let NCuts := NCuts + 1;
    let {i in S} Y[i, NCuts] := u[i];

    let DUAL_COSTS[NCuts] := Dual_Cost;

    let GAP := abs(Dual_Cost - z);
    let GAPs[NCuts] := GAP;
    display GAP;
    if GAP <= epsilon * z then break;

    printf "\nSolving Master Problem\n";
    solve Master > ./tmp.rubbish;

    display Master.result, x, z, Total_Cost;

    let X := x;

    let TOTAL_COSTS[NCuts] := Total_Cost;
    let Xs[NCuts] := x;
    let Zs[NCuts] := z;
}

display x, Total_Cost;

display DUAL_COSTS, GAPs, TOTAL_COSTS, Zs, Xs;
