reset;

# Imports
model rsd.mod;
data net.dat;
option solver cplex;

# Scenario Parameters
param EPSILON := 0.0005;
param MAX_ITERATIONS := 500;
let RHO := 4;

# Parameters
param ITERATION;

param X {A};

param BLB;
param OBJ_FUNC;
param GAP;

param INDEX;
param SMALLEST;
param SMALLEST_INDEX;


# Models

problem Sub: f, tf, I, total_flux, Gradient_F;
problem Master: alpha, x, unit_alpha_sum, convex_hull_alpha, used_indices_alpha, F;

# Initialization
let ITERATION := 1;
let {r in 1..RHO} USED_INDICES[r] := 0;
let BLB := -Infinity;

let {(i, j) in A} S[i, j] := 1;
solve Sub;
let {(i, j) in A} X[i, j] := tf[i, j];
let {(i, j) in A} W[0, i, j] := X[i, j];
let USED_INDICES[0] := 1;
display X;

printf "Iteration,Objective Function,Relative Gap,#Vertex,C0,C1,C2,C3,C4\n" > "iterations/rsd.csv";

repeat while ITERATION <= MAX_ITERATIONS {

    printf "-------------ITERATION %d----------------\n\n", ITERATION;

    # 1 Solve Subproblem
    # 1.1 Update Arc cost
    let { (i, j) in A } S[i, j] := C[i, j] + DELTA * X[i, j];
    solve Sub;

    # 2 Update Working Sets
    if (sum {r in 1..RHO} USED_INDICES[r]) < RHO then {
        for {r in 1..RHO} {
            if USED_INDICES[r] = 0 then {
                let INDEX := r;
                break;
            }
        }
        printf "Adding new vertex at index %d\n", INDEX;
        let {(i, j) in A} W[INDEX, i, j] := tf[i, j];
        let USED_INDICES[INDEX] := 1;
    } else {
        let SMALLEST := Infinity;
        for {r in 1..RHO} {
            if alpha[r] < SMALLEST then {
                let SMALLEST_INDEX := r;
            }
        }
        printf "Replacing vertex at index %d\n", SMALLEST_INDEX;
        let {(i, j) in A} W[SMALLEST_INDEX, i, j] := tf[i, j];

        let {(i, j) in A} W[0, i, j] := X[i, j];
        let USED_INDICES[0] := 1;
    }

    # 3 Stopping Criterion
    let OBJ_FUNC := sum{(i, j) in A} (C[i,j] * X[i,j] + 0.5 * DELTA * X[i, j]^2);
    let BLB := max(BLB, OBJ_FUNC + sum{(i, j) in A} (S[i, j] * (tf[i, j] - X[i, j]))); # f(X) + der_f(X)'(tf - X)
    let GAP := (OBJ_FUNC - BLB) / BLB;
    display GAP;

    printf "%d,%.4e,%.4e,", ITERATION, OBJ_FUNC, GAP > "iterations/rsd.csv";

    if GAP <= EPSILON then break;

    # 4 Master Problem

    solve Master;
    display USED_INDICES, alpha;
    if (sum{(i, j) in A} (x[i, j] - X[i, j]) = 0) then printf "Master x didn't change :(\n";
    let {(i, j) in A} X[i, j] := x[i, j];
    
    # Purge W
    for {r in 0..RHO} {
        if USED_INDICES[r] = 1 and alpha[r] < 1e-8 then {
            printf "Purging vertex %d in W\n", r; 
            let {(i, j) in A} W[r, i, j] := 0;
            let USED_INDICES[r] := 0;
        }
    }

    printf "%d,%.4e,%.4e,%.4e,%.4e,%.4e\n", sum{r in 0..RHO}USED_INDICES[r], alpha[0], alpha[1], alpha[2], alpha[3], alpha[4] > "iterations/rsd.csv";
    let ITERATION := ITERATION + 1;
}

printf "-,-,-,-,-,-\n" > "iterations/rsd.csv";

for {i in N} {
    for {j in N} {
        if (i, j) not in A then continue;
        if x[i, j] < 1e-6 then continue;
        printf "%d,%d,%.2f\n", i, j, x[i, j] > "results/rsd.csv";
    }
}

print OBJ_FUNC;
