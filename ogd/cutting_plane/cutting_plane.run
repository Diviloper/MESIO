
reset;

model cutting_plane.mod;
data cutting_plane.dat;
data caps.dat;
option solver cplex;


problem MasterProblem: 
    z, mu,                    # Variables
    cuts,                     # Restrictions
    Z;                        # Objective Function

problem SubProblem: 
    flow, tf, afo, afd,       # Variables
    I, AI, total_flow, caps, # Restrictions
    w;                        # Objective Function

param MAXCUTS default 1000;
let NCUTS := 1;
param epsilon = 1.0e-8;

# Generate Initial solution
let {f in FN, o in O} AFO[f, o, NCUTS] := T[o, o];
let {f in FN, n in N, o in O} AFD[f, n, o, NCUTS] := -T[n, o];

param MUA;
param VARIANT within {1..3} := 3;


for {1..MAXCUTS}{
    let YY[NCUTS] := 0; # enables the NCUTS-th constraint.
    solve MasterProblem;
    

    if VARIANT = 1 then let {(i, j) in A} MU[i, j] := mu[i, j];
    else {
        if VARIANT = 2 then let MUA := 1 / (NCUTS + 1);
        else let MUA := NCUTS^2 / sum{k in 1..NCUTS} k^2;
        
        let {(i, j) in A} MU[i, j] := mu[i, j] + MUA * abs(mu[i, j] - MU[i, j]);
    }

    solve SubProblem;

    let NCUTS := NCUTS + 1;

    let {(i, j) in A} FLOW[i, j, NCUTS] := tf[i, j];
    let {f in FN, o in O} AFO[f, o, NCUTS] := afo[f, o];
    let {f in FN, i in N, o in O} AFD[f, i, o, NCUTS] := afd[f, i, o];

    if abs(w-z) < epsilon then {
        printf "Convergence reached in %i iterations\n", NCUTS;
        break;
    }
}

display w, z;
